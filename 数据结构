#include <stdio.h>
#include <stdlib.h>
#include<string.h>
struct tree {
    char elem[50];
    struct tree *FirstChild;
    struct tree *NextBro;
};

struct tree *root_ptr = NULL;//根节点

/* 知道第一个孩子的位置，将要添加的节点放到链尾 */
int register_child(struct tree **first, struct tree *tree_ptr)
{
    struct tree *ptr = *first;
    while (ptr->NextBro)
        ptr = ptr->NextBro;

    ptr->NextBro = tree_ptr;
    return 0;
}

/* 3层树
* floor: 要添加的链表位于第几层
* FirstFa: 是第一层第几个节点的孩子
* num：节点的值
*/
int add_tree(int floor, int FirstFa, char num[50])
{
    struct tree *tree_ptr = (struct tree *)calloc(1, sizeof(struct tree));
    if (!tree_ptr) {
        printf("calloc error\n");
        return -1;
    }
    if (!root_ptr) {
        if (floor == 0)
            root_ptr = tree_ptr;
    }
    else {
        if (floor == 0) {
            printf("root really exist\n");
            goto error;
        }
        else if (floor == 1) {
            if (!(root_ptr->FirstChild))
                root_ptr->FirstChild = tree_ptr;
            else
                register_child(&(root_ptr->FirstChild), tree_ptr);
        }
        else if (floor == 2) {
            int i;
            struct tree *last_fa = root_ptr->FirstChild;
            if (!last_fa) {
                printf("no first floor\n");   //第1层没有
                goto error;
            }
            for (i = 0; i < FirstFa; i++)
                last_fa = last_fa->NextBro;
            if (!last_fa) {
                printf("your father No exist\n");  //对应的父节点没有
                goto error;
            }
            if (!(last_fa->FirstChild))
                last_fa->FirstChild = tree_ptr;
            else
                register_child(&(last_fa->FirstChild), tree_ptr);
        }
    }
    //tree_ptr->elem = num;
	strcpy(tree_ptr->elem, num); /*给数组赋字符串*/ 
    tree_ptr->FirstChild = NULL;
    tree_ptr->NextBro = NULL;
    return 0;
error:
    free(tree_ptr);
    return -1;
}

/* 输出该节点和节点下的所以数据 */
int output_fa_and_child(struct tree *fa)
{
    static int cnt = 0;
	struct tree *vy=fa->FirstChild;
    printf("data %d : %s\n",cnt++,fa->elem);
    //struct tree *vy = fa->FirstChild;
	while (vy) {
        output_fa_and_child(vy);   //递归调用
        vy = vy->NextBro;
    }
    return 0;
}

/*查询节点*/
int search(char num[50])
{
	int i;
	struct tree *tree_ptr = (struct tree *)calloc(1, sizeof(struct tree));
	struct tree *last_fa = root_ptr->FirstChild;
            if (!last_fa) {
                printf("no first floor\n");   //第1层没有
                goto error;
            }
            for (i = 0; ; i++){
				 if (!last_fa) 
					 break;
				 if(strcmp(num,last_fa->elem)==0){
					 output_fa_and_child(last_fa);
					 break;
				 }
				 last_fa = last_fa->NextBro;
			}
            if (!last_fa) {
                printf("无此部门\n");  //对应的处级结构点没有
                goto error;
            }
			error:
    free(tree_ptr);
    return -1;
}


/* 输出树中的所有数据 */
int output_tree_data(void)
{
    if (!root_ptr) {
        printf("no data\n");
        return -1;
    }
    output_fa_and_child(root_ptr);
    return 0;
}

/*输出全部*/
void output()
{
	int ret;
	ret = output_tree_data();
    if (ret < 0)
        printf("output_tree_data error\n");
}

/* 初始化*/
int init()
{
	int i;
    int ret;
    /* 向树中添加10个节点 */
	char num[25][50] = {{"江苏海洋大学"},{"计算机学院"},{"理学院"},{"文学院"},{"商学院"},{"药学院"},{"软件工程"},
	                    {"软件工程(嵌入式)"},{"网络工程"},{"计算机科学与技术"},{"数学与应用数学"},{"信息与计算科学"},
	                     {"统计学"},{"光电信息科学与工程"},{"汉语言文学"},{"新闻传播"},{"新闻学"},{"广告学"}
	                       ,{"金融系"},{"国际经济与贸易系"},{"市场营销"},{"财务管理"},{"制药工程"},{"药物制剂"},{"药物分析"}};
	ret = add_tree(0, 0, num[0]);
    if (ret < 0) {
        printf("add_tree error\n");
    }
    for (i = 1; i < 6; i++) {
        ret = add_tree(1, 0, num[i]);
        if (ret < 0) {
            printf("add_tree error\n");
			return -1;
        }
    }
    for (i = 1; i < 5; i++) {
        ret = add_tree(2, 0, num[5 + i]);
        if (ret < 0) {
            printf("add_tree error\n");
			return -1;
        }
    }
	for (i = 1; i < 5; i++) {
        ret = add_tree(2, 1, num[9 + i]);
        if (ret < 0) {
            printf("add_tree error\n");
			return -1;
        }
    }
	for (i = 1; i < 5; i++) {
        ret = add_tree(2, 2, num[13 + i]);
        if (ret < 0) {
            printf("add_tree error\n");
			return -1;
        }
    }
	for (i = 1; i < 5; i++) {
        ret = add_tree(2, 3, num[17 + i]);
        if (ret < 0) {
            printf("add_tree error\n");
			return -1;
        }
    }
	for (i = 1; i < 4; i++) {
        ret = add_tree(2, 4, num[21 + i]);
        if (ret < 0) {
            printf("add_tree error\n");
			return -1;
        }
    }
	return 1;
}

/*界面显示*/
void show()
{
	char s1[]={"                ---------------------               \n"};
	char s2[]={"                *********************               \n"};
	char s3[]={"                |                    |              \n"};
	char s4[]={"                |     组织机构       |              \n"};
	printf("\n\n\n\n\n%s%s%s%s",s1,s2,s3,s4,s3); 

}
int main()
{
    int ret;
    ret=init();
	if (ret < 0)
        printf("init error\n");
	search("计算机学院");
    //show();
    
	system("pause");
   return 0;
}


